plugins {
    id 'application'
    id 'extra-java-module-info'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'com.sparrowwallet'
version '1.0-SNAPSHOT'

def os = org.gradle.internal.os.OperatingSystem.current()
def osName = os.getFamilyName()

def vTor = '4.7.13-4'
def vKmpTor = '1.4.2'
def kmpOs = osName
if(os.macOsX) {
    kmpOs = "macos"
} else if(os.windows) {
    kmpOs = "mingw"
}
def kmpArch = "x64"
if(System.getProperty("os.arch") == "aarch64") {
    kmpArch = "arm64"
}

repositories {
    mavenCentral()
    maven { url 'https://mymavenrepo.com/repo/29EACwkkGcoOKnbx3bxN/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
}

application {
    mainModule = 'com.sparrowwallet.kmptorjava'
    mainClass = 'com.sparrowwallet.kmptorjava.Main'
}

javafx {
    version = "18"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]
}

dependencies {
    implementation "io.matthewnelson.kotlin-components:kmp-tor:$vTor-$vKmpTor"
    if(kmpOs == "linux" && kmpArch == "arm64") {
        implementation("com.sparrowwallet.kmp-tor-binary:kmp-tor-binary-$kmpOs$kmpArch-jvm:$vTor")
    } else {
        implementation("io.matthewnelson.kotlin-components:kmp-tor-binary-$kmpOs$kmpArch:$vTor")
    }
    implementation("io.matthewnelson.kotlin-components:kmp-tor-binary-extract:$vTor")
    implementation("io.matthewnelson.kotlin-components:kmp-tor-ext-callback-manager:$vKmpTor")

    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.6.4')

    implementation ('ch.qos.logback:logback-classic:1.4.6') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
        exclude group: 'org.slf4j'
    }
    implementation ('org.slf4j:slf4j-api:2.0.5')
}

run {
    applicationDefaultJvmArgs = ["--add-reads=kotlin.stdlib=kotlinx.coroutines.core.jvm"]
}

test {
    useJUnitPlatform()
}

extraJavaModuleInfo {
    module('kotlinx-coroutines-core-jvm-1.6.4.jar', 'kotlinx.coroutines.core.jvm', '1.6.4') {
        exports('kotlinx.coroutines')
        requires('kotlin.stdlib')
        requires('java.instrument')
        uses('kotlinx.coroutines.CoroutineExceptionHandler')
        uses('kotlinx.coroutines.internal.MainDispatcherFactory')
    }
    module('kotlinx-coroutines-javafx-1.6.4.jar', 'kotlinx.coroutines.javafx', '1.6.4') {
        exports('kotlinx.coroutines.javafx')
        requires('kotlinx.coroutines.core.jvm')
        requires('kotlin.stdlib')
        requires('javafx.graphics')
    }
    module("kmp-tor-jvm-${vKmpTor}.jar", 'kmp.tor.jvm', "$vTor-$vKmpTor") {
        exports('io.matthewnelson.kmp.tor')
        requires('kmp.tor.binary.extract.jvm')
        requires('kmp.tor.manager.jvm')
        requires('kmp.tor.manager.common.jvm')
        requires('kmp.tor.controller.common.jvm')
        requires('kotlin.stdlib')
        requires('kotlinx.coroutines.core.jvm')
        requires('java.management')
    }
    if(kmpOs == "linux" && kmpArch == "arm64") {
        module("kmp-tor-binary-$kmpOs$kmpArch-jvm-${vTor}.jar", "kmp.tor.binary.$kmpOs$kmpArch", "$vTor") {
            exports("io.matthewnelson.kmp.tor.resource.$kmpOs.$kmpArch")
            exports("kmptor.$kmpOs.$kmpArch")
        }
    } else {
        module("kmp-tor-binary-$kmpOs$kmpArch-jvm-${vTor}.jar", "kmp.tor.binary.$kmpOs$kmpArch", "$vTor") {
            exports("io.matthewnelson.kmp.tor.binary.$kmpOs.$kmpArch")
            exports("kmptor.$kmpOs.$kmpArch")
        }
    }
    module("kmp-tor-binary-extract-jvm-${vTor}.jar", 'kmp.tor.binary.extract.jvm', "$vTor") {
        exports('io.matthewnelson.kmp.tor.binary.extract')
        exports('io.matthewnelson.kmp.tor.binary.extract.internal')
        requires('kotlin.stdlib')
        requires("kmp.tor.binary.$kmpOs$kmpArch")
        requires('kmp.tor.binary.geoip.jvm')
    }
    module("kmp-tor-manager-jvm-${vKmpTor}.jar", 'kmp.tor.manager.jvm', "$vKmpTor") {
        exports('io.matthewnelson.kmp.tor.manager')
        exports('io.matthewnelson.kmp.tor.manager.util')
        requires('kmp.tor.controller.common.jvm')
        requires('kmp.tor.manager.common.jvm')
        requires('kotlin.stdlib')
        requires('kotlinx.coroutines.core.jvm')
        requires('kotlinx.atomicfu')
        requires('kmp.tor.controller.jvm')
        requires('kmp.tor.common.jvm')
    }
    module("kmp-tor-manager-common-jvm-${vKmpTor}.jar", 'kmp.tor.manager.common.jvm', "$vKmpTor") {
        exports('io.matthewnelson.kmp.tor.manager.common')
        exports('io.matthewnelson.kmp.tor.manager.common.event')
        exports('io.matthewnelson.kmp.tor.manager.common.state')
        requires('kmp.tor.controller.common.jvm')
        requires('kmp.tor.common.jvm')
        requires('kotlin.stdlib')
    }
    module("kmp-tor-controller-common-jvm-${vKmpTor}.jar", 'kmp.tor.controller.common.jvm', "$vKmpTor") {
        exports('io.matthewnelson.kmp.tor.controller.common.config')
        exports('io.matthewnelson.kmp.tor.controller.common.file')
        exports('io.matthewnelson.kmp.tor.controller.common.control')
        exports('io.matthewnelson.kmp.tor.controller.common.control.usecase')
        exports('io.matthewnelson.kmp.tor.controller.common.events')
        exports('io.matthewnelson.kmp.tor.controller.common.exceptions')
        requires('kmp.tor.common.jvm')
        requires('kotlin.stdlib')
        requires('kotlinx.atomicfu')
    }
    module("kmp-tor-common-jvm-${vKmpTor}.jar", 'kmp.tor.common.jvm', "$vKmpTor") {
        exports('io.matthewnelson.kmp.tor.common.address')
        requires('parcelize.jvm')
        requires('kotlin.stdlib')
    }
    module("kmp-tor-controller-jvm-${vKmpTor}.jar", 'kmp.tor.controller.jvm', "$vKmpTor") {
        exports('io.matthewnelson.kmp.tor.controller.internal.controller')
        requires('kmp.tor.common.jvm')
        requires('kmp.tor.controller.common.jvm')
        requires('kotlinx.coroutines.core.jvm')
        requires('kotlin.stdlib')
        requires('kotlinx.atomicfu')
        requires('encoding.core.jvm')
        requires('encoding.base16.jvm')
    }
    module("kmp-tor-ext-callback-common-jvm-${vKmpTor}.jar", 'kmp.tor.ext.callback.common.jvm', "$vKmpTor") {
        exports('io.matthewnelson.kmp.tor.ext.callback.common')
    }
    module("kmp-tor-ext-callback-manager-jvm-${vKmpTor}.jar", 'kmp.tor.ext.callback.manager.jvm', "$vKmpTor") {
        exports('io.matthewnelson.kmp.tor.ext.callback.manager')
        requires('kmp.tor.manager.jvm')
        requires('kmp.tor.ext.callback.common.jvm')
        requires('kmp.tor.ext.callback.manager.common.jvm')
        requires('kmp.tor.ext.callback.controller.common.jvm')
        requires('kmp.tor.manager.common.jvm')
        requires('kmp.tor.controller.common.jvm')
        requires('kotlin.stdlib')
        requires('kotlinx.coroutines.core.jvm')
    }
    module("kmp-tor-ext-callback-manager-common-jvm-${vKmpTor}.jar", 'kmp.tor.ext.callback.manager.common.jvm', "$vKmpTor") {
        exports('io.matthewnelson.kmp.tor.ext.callback.manager.common')
        requires('kmp.tor.ext.callback.controller.common.jvm')
    }
    module("kmp-tor-ext-callback-controller-common-jvm-${vKmpTor}.jar", 'kmp.tor.ext.callback.controller.common.jvm', "$vKmpTor") {
        exports('io.matthewnelson.kmp.tor.ext.callback.controller.common.control')
        exports('io.matthewnelson.kmp.tor.ext.callback.controller.common.control.usecase')
    }
    module("kmp-tor-binary-geoip-jvm-${vTor}.jar", 'kmp.tor.binary.geoip.jvm', "${vTor}") {
        exports('io.matthewnelson.kmp.tor.binary.geoip')
        exports('kmptor')
    }
    module("encoding-base16-jvm-1.2.1.jar", 'encoding.base16.jvm', "1.2.1") {
        exports('io.matthewnelson.encoding.base16')
        requires('encoding.core.jvm')
        requires('kotlin.stdlib')
    }
    module("encoding-base32-jvm-1.2.1.jar", 'encoding.base32.jvm', "1.2.1")
    module("encoding-base64-jvm-1.2.1.jar", 'encoding.base64.jvm', "1.2.1")
    module("encoding-core-jvm-1.2.1.jar", 'encoding.core.jvm', "1.2.1") {
        exports('io.matthewnelson.encoding.core')
        requires('kotlin.stdlib')
    }
    module("parcelize-jvm-0.1.2.jar", 'parcelize.jvm', "0.1.2") {
        exports('io.matthewnelson.component.parcelize')
    }
    module("annotations-13.0.jar", 'jetbrains.annotations', "13.0") {
        exports('org.jetbrains.annotations')
    }
}